name "viso2"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "viso2Types.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
using_library "viso2"
import_types_from "base"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the viso2 namespace.
task_context "StereoOdometer" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #**************************
    #**** Task Properties *****
    #**************************
    property("viso2_parameters", 'viso2/StereoOdometerParameters').
        doc 'Visual Odometry Stereo parameters. Including intrinsic and extrinsic camera calibration parameters among others'+
            'for a full parameter list have a look at viso2Types.hpp and at viso_stereo.h of the viso2 library' 

    # An input port, i.e. an object from which the component gets data from
    # other components' outputs
    #
    # Data can be retrieved using _input.read(value), which returns true if data
    # was available, and false otherwise. _input.connected() returns if this
    # input is connected to an output or not.

    #******************************
    #******* Input ports  *********
    #******************************
    input_port("left_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Left camera frame.'
    input_port("right_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Right camera frame.'

    #******************************
    #** Aggregator parameters *****
    #******************************
    # Aggregator does not support pointers as input ports
    stream_aligner() do
	align_port("left_frame", 0.4)
	align_port("right_frame", 0.4)
	max_latency(1.0)
    end

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.

    #******************************
    #******* Output Ports *********
    #******************************
    output_port("pose_samples_out", "/base/samples/RigidBodyState").
        doc "Estimated left camera pose."

    #******************************
    #******* Debug Ports **********
    #******************************
    output_port("intra_frame_samples_out",  ro_ptr('base::samples::frame::Frame')).
        doc 'Intra frame correspondences image. Debug purposes'


    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    port_driven
end

