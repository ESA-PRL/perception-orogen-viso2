name "viso2"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "base"
import_types_from "frame_helper/Calibration.h"
import_types_from "frame_helper/FrameHelperTypes.h"
import_types_from "viso2Types.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
using_library "opencv"
using_library "frame_helper"
using_library "viso2"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the viso2 namespace.
task_context "StereoOdometer" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #**************************
    #**** Task Properties *****
    #**************************
    property("calib_parameters","frame_helper/StereoCalibration").
        doc 'Intrinsic and extrinsic camera calibration parameters'+
            'for a full parameter list have a look at frame_helper'

    property("viso2_parameters", 'viso2/StereoOdometerParameters').
        doc 'Visual Odometry Stereo parameters'+
            'for a full parameter list have a look at viso2Types.hpp'+
            'and at viso_stereo.h of the viso2 library.'

    property("output_format", "/base/samples/frame/frame_mode_t", :MODE_UNDEFINED).
       doc "The camera_format is converted into this format before it is written to the output port "
           "Set it to MODE_UNDEFINED if you want to disable the conversion and the camera_format shall be used."

    property("resize_algorithm","/frame_helper/ResizeAlgorithm",:INTER_LINEAR).
        doc "resize algorithm which is used to scale the frame before it is written to the output port. "
            "allowed values are INTER_LINEAR, INTER_NEAREST, INTER_AREA, INTER_CUBIC, INTER_LANCZOS4, BAYER_RESIZE."

    property("scale_x", "double", 1).
       doc "scale factor for the x direction which is used to scale the image before it is written to the output_port. "

    property("scale_y", "double" , 1).
       doc "scale factor for the y direction which is used to scale the image before it is written to the output_port. "

    #******************************
    #******* Input ports  *********
    #******************************
    input_port("left_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Left camera frame.'

    input_port("right_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Right camera frame.'

    #******************************
    #** Aggregator parameters *****
    #******************************
    # Aggregator does not support pointers as input ports
    stream_aligner() do
	align_port("left_frame", 0.05)
	align_port("right_frame", 0.05)
	max_latency(0.1)
    end

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.

    #******************************
    #******* Output Ports *********
    #******************************
    output_port("pose_samples_out", "/base/samples/RigidBodyState").
        doc "Estimated left camera pose."

    #******************************
    #******* Debug Ports **********
    #******************************
    property('output_debug', 'bool', false).
	doc 'Set to true if output debug information is desirable.'

    output_port("intra_frame_samples_out",  ro_ptr('base::samples::frame::Frame')).
        doc 'Intra (Left - Right) frame correspondences image.'

    output_port("point_cloud_samples_out",  'base::samples::Pointcloud').
        doc 'Point Cloud representation of the 3D features.'

    output_port("left_frame_samples_out",  ro_ptr('base::samples::frame::FramePair')).
        doc 'Undistorted Image pair.'

    port_driven
end

